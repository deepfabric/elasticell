// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: querypb.proto

/*
	Package querypb is a generated protocol buffer package.

	It is generated from these files:
		querypb.proto

	It has these top-level messages:
		QueryReq
		UintPred
		StrPred
		QueryRsp
		Document
*/
package querypb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	errorpb "github.com/deepfabric/elasticell/pkg/pb/errorpb"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryReq struct {
	UUID             []byte      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	SessionID        int64       `protobuf:"varint,2,opt,name=sessionID" json:"sessionID"`
	ToStore          uint64      `protobuf:"varint,3,opt,name=toStore" json:"toStore"`
	FromStore        uint64      `protobuf:"varint,4,opt,name=fromStore" json:"fromStore"`
	Cells            []uint64    `protobuf:"varint,5,rep,name=cells" json:"cells,omitempty"`
	Index            string      `protobuf:"bytes,6,opt,name=index" json:"index"`
	UintPreds        []*UintPred `protobuf:"bytes,7,rep,name=uintPreds" json:"uintPreds,omitempty"`
	StrPreds         []*StrPred  `protobuf:"bytes,8,rep,name=strPreds" json:"strPreds,omitempty"`
	Limit            uint64      `protobuf:"varint,9,opt,name=limit" json:"limit"`
	OrderBy          string      `protobuf:"bytes,10,opt,name=orderBy" json:"orderBy"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *QueryReq) Reset()                    { *m = QueryReq{} }
func (m *QueryReq) String() string            { return proto.CompactTextString(m) }
func (*QueryReq) ProtoMessage()               {}
func (*QueryReq) Descriptor() ([]byte, []int) { return fileDescriptorQuerypb, []int{0} }

func (m *QueryReq) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *QueryReq) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *QueryReq) GetToStore() uint64 {
	if m != nil {
		return m.ToStore
	}
	return 0
}

func (m *QueryReq) GetFromStore() uint64 {
	if m != nil {
		return m.FromStore
	}
	return 0
}

func (m *QueryReq) GetCells() []uint64 {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *QueryReq) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *QueryReq) GetUintPreds() []*UintPred {
	if m != nil {
		return m.UintPreds
	}
	return nil
}

func (m *QueryReq) GetStrPreds() []*StrPred {
	if m != nil {
		return m.StrPreds
	}
	return nil
}

func (m *QueryReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *QueryReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type UintPred struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Low              uint64 `protobuf:"varint,2,opt,name=low" json:"low"`
	High             uint64 `protobuf:"varint,3,opt,name=high" json:"high"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *UintPred) Reset()                    { *m = UintPred{} }
func (m *UintPred) String() string            { return proto.CompactTextString(m) }
func (*UintPred) ProtoMessage()               {}
func (*UintPred) Descriptor() ([]byte, []int) { return fileDescriptorQuerypb, []int{1} }

func (m *UintPred) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UintPred) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *UintPred) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

type StrPred struct {
	Name             string `protobuf:"bytes,1,opt,name=name" json:"name"`
	ContWord         string `protobuf:"bytes,2,opt,name=contWord" json:"contWord"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *StrPred) Reset()                    { *m = StrPred{} }
func (m *StrPred) String() string            { return proto.CompactTextString(m) }
func (*StrPred) ProtoMessage()               {}
func (*StrPred) Descriptor() ([]byte, []int) { return fileDescriptorQuerypb, []int{2} }

func (m *StrPred) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StrPred) GetContWord() string {
	if m != nil {
		return m.ContWord
	}
	return ""
}

type QueryRsp struct {
	UUID             []byte         `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	ToStore          uint64         `protobuf:"varint,2,opt,name=toStore" json:"toStore"`
	FromStore        uint64         `protobuf:"varint,3,opt,name=fromStore" json:"fromStore"`
	Cells            []uint64       `protobuf:"varint,4,rep,name=cells" json:"cells,omitempty"`
	Error            *errorpb.Error `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Docs             []*Document    `protobuf:"bytes,6,rep,name=docs" json:"docs,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *QueryRsp) Reset()                    { *m = QueryRsp{} }
func (m *QueryRsp) String() string            { return proto.CompactTextString(m) }
func (*QueryRsp) ProtoMessage()               {}
func (*QueryRsp) Descriptor() ([]byte, []int) { return fileDescriptorQuerypb, []int{3} }

func (m *QueryRsp) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *QueryRsp) GetToStore() uint64 {
	if m != nil {
		return m.ToStore
	}
	return 0
}

func (m *QueryRsp) GetFromStore() uint64 {
	if m != nil {
		return m.FromStore
	}
	return 0
}

func (m *QueryRsp) GetCells() []uint64 {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *QueryRsp) GetError() *errorpb.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *QueryRsp) GetDocs() []*Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

type Document struct {
	Order            []uint64 `protobuf:"varint,1,rep,name=order" json:"order,omitempty"`
	Key              []byte   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	FvPairs          [][]byte `protobuf:"bytes,3,rep,name=fvPairs" json:"fvPairs,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (m *Document) String() string            { return proto.CompactTextString(m) }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptorQuerypb, []int{4} }

func (m *Document) GetOrder() []uint64 {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Document) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Document) GetFvPairs() [][]byte {
	if m != nil {
		return m.FvPairs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryReq)(nil), "querypb.QueryReq")
	proto.RegisterType((*UintPred)(nil), "querypb.UintPred")
	proto.RegisterType((*StrPred)(nil), "querypb.StrPred")
	proto.RegisterType((*QueryRsp)(nil), "querypb.QueryRsp")
	proto.RegisterType((*Document)(nil), "querypb.Document")
}
func (m *QueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UUID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuerypb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.SessionID))
	dAtA[i] = 0x18
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.ToStore))
	dAtA[i] = 0x20
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.FromStore))
	if len(m.Cells) > 0 {
		for _, num := range m.Cells {
			dAtA[i] = 0x28
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(len(m.Index)))
	i += copy(dAtA[i:], m.Index)
	if len(m.UintPreds) > 0 {
		for _, msg := range m.UintPreds {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StrPreds) > 0 {
		for _, msg := range m.StrPreds {
			dAtA[i] = 0x42
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x48
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.Limit))
	dAtA[i] = 0x52
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(len(m.OrderBy)))
	i += copy(dAtA[i:], m.OrderBy)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UintPred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UintPred) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.Low))
	dAtA[i] = 0x18
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.High))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StrPred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrPred) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(len(m.ContWord)))
	i += copy(dAtA[i:], m.ContWord)
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *QueryRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UUID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuerypb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.ToStore))
	dAtA[i] = 0x18
	i++
	i = encodeVarintQuerypb(dAtA, i, uint64(m.FromStore))
	if len(m.Cells) > 0 {
		for _, num := range m.Cells {
			dAtA[i] = 0x20
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(num))
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintQuerypb(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Docs) > 0 {
		for _, msg := range m.Docs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		for _, num := range m.Order {
			dAtA[i] = 0x8
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(num))
		}
	}
	if m.Key != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuerypb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.FvPairs) > 0 {
		for _, b := range m.FvPairs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQuerypb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Querypb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Querypb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQuerypb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueryReq) Size() (n int) {
	var l int
	_ = l
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovQuerypb(uint64(l))
	}
	n += 1 + sovQuerypb(uint64(m.SessionID))
	n += 1 + sovQuerypb(uint64(m.ToStore))
	n += 1 + sovQuerypb(uint64(m.FromStore))
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			n += 1 + sovQuerypb(uint64(e))
		}
	}
	l = len(m.Index)
	n += 1 + l + sovQuerypb(uint64(l))
	if len(m.UintPreds) > 0 {
		for _, e := range m.UintPreds {
			l = e.Size()
			n += 1 + l + sovQuerypb(uint64(l))
		}
	}
	if len(m.StrPreds) > 0 {
		for _, e := range m.StrPreds {
			l = e.Size()
			n += 1 + l + sovQuerypb(uint64(l))
		}
	}
	n += 1 + sovQuerypb(uint64(m.Limit))
	l = len(m.OrderBy)
	n += 1 + l + sovQuerypb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UintPred) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovQuerypb(uint64(l))
	n += 1 + sovQuerypb(uint64(m.Low))
	n += 1 + sovQuerypb(uint64(m.High))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StrPred) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovQuerypb(uint64(l))
	l = len(m.ContWord)
	n += 1 + l + sovQuerypb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryRsp) Size() (n int) {
	var l int
	_ = l
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovQuerypb(uint64(l))
	}
	n += 1 + sovQuerypb(uint64(m.ToStore))
	n += 1 + sovQuerypb(uint64(m.FromStore))
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			n += 1 + sovQuerypb(uint64(e))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovQuerypb(uint64(l))
	}
	if len(m.Docs) > 0 {
		for _, e := range m.Docs {
			l = e.Size()
			n += 1 + l + sovQuerypb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Document) Size() (n int) {
	var l int
	_ = l
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			n += 1 + sovQuerypb(uint64(e))
		}
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovQuerypb(uint64(l))
	}
	if len(m.FvPairs) > 0 {
		for _, b := range m.FvPairs {
			l = len(b)
			n += 1 + l + sovQuerypb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovQuerypb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuerypb(x uint64) (n int) {
	return sovQuerypb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToStore", wireType)
			}
			m.ToStore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToStore |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromStore", wireType)
			}
			m.FromStore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromStore |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cells = append(m.Cells, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuerypb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuerypb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cells = append(m.Cells, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UintPreds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UintPreds = append(m.UintPreds, &UintPred{})
			if err := m.UintPreds[len(m.UintPreds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrPreds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrPreds = append(m.StrPreds, &StrPred{})
			if err := m.StrPreds[len(m.StrPreds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UintPred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UintPred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UintPred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrPred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrPred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrPred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContWord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContWord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToStore", wireType)
			}
			m.ToStore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToStore |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromStore", wireType)
			}
			m.FromStore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromStore |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Cells = append(m.Cells, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuerypb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuerypb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Cells = append(m.Cells, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &errorpb.Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = append(m.Docs, &Document{})
			if err := m.Docs[len(m.Docs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Order = append(m.Order, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuerypb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuerypb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Order = append(m.Order, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FvPairs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuerypb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FvPairs = append(m.FvPairs, make([]byte, postIndex-iNdEx))
			copy(m.FvPairs[len(m.FvPairs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerypb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuerypb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerypb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerypb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerypb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuerypb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuerypb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuerypb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuerypb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerypb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("querypb.proto", fileDescriptorQuerypb) }

var fileDescriptorQuerypb = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xc7, 0xeb, 0xc6, 0x59, 0xd2, 0xb3, 0x7e, 0x9f, 0x86, 0x55, 0x90, 0x55, 0xa1, 0xcc, 0x8a,
	0x40, 0xca, 0x05, 0x6a, 0xa5, 0x3d, 0x42, 0xd5, 0x5d, 0x4c, 0xe2, 0x62, 0x78, 0x2a, 0x5c, 0x6f,
	0x8d, 0xd7, 0x45, 0xb4, 0x71, 0x67, 0x27, 0x40, 0xdf, 0x84, 0x47, 0xda, 0x1d, 0x7b, 0x01, 0x26,
	0x28, 0x2f, 0x82, 0x6c, 0xc7, 0x6d, 0xe0, 0x82, 0x5e, 0xd9, 0xe7, 0x77, 0xfe, 0x3e, 0x3e, 0x3e,
	0x7f, 0xc3, 0x7f, 0xf7, 0xb5, 0x50, 0x9b, 0xf5, 0xcd, 0x68, 0xad, 0x64, 0x25, 0x49, 0xd4, 0x84,
	0xc3, 0xe7, 0x42, 0x29, 0xa9, 0xd6, 0x37, 0xe3, 0x66, 0x75, 0xf9, 0xe1, 0x60, 0x21, 0x17, 0xd2,
	0x6e, 0xc7, 0x66, 0xe7, 0x68, 0xfa, 0xbd, 0x0b, 0xf1, 0x3b, 0x73, 0x90, 0x8b, 0x7b, 0xf2, 0x12,
	0x70, 0x5d, 0x17, 0x39, 0x45, 0x0c, 0x65, 0xfd, 0x49, 0xbc, 0x7d, 0x3a, 0xc5, 0xb3, 0xd9, 0xc5,
	0x94, 0x5b, 0x4a, 0x52, 0xe8, 0x69, 0xa1, 0x75, 0x21, 0xcb, 0x8b, 0x29, 0xed, 0x32, 0x94, 0x05,
	0x13, 0xfc, 0xf0, 0x74, 0xda, 0xe1, 0x7b, 0x4c, 0x12, 0x88, 0x2a, 0x79, 0x55, 0x49, 0x25, 0x68,
	0xc0, 0x50, 0x86, 0x1b, 0x85, 0x87, 0xa6, 0xc6, 0xad, 0x92, 0x2b, 0xa7, 0xc0, 0x2d, 0xc5, 0x1e,
	0x93, 0x01, 0x84, 0x73, 0xb1, 0x5c, 0x6a, 0x1a, 0xb2, 0x20, 0xc3, 0xdc, 0x05, 0x64, 0x08, 0x61,
	0x51, 0xe6, 0xe2, 0x0b, 0x3d, 0x62, 0x28, 0xeb, 0x35, 0xa7, 0x1c, 0x22, 0x63, 0xe8, 0xd5, 0x45,
	0x59, 0x5d, 0x2a, 0x91, 0x6b, 0x1a, 0xb1, 0x20, 0x3b, 0x3e, 0x7b, 0x36, 0xf2, 0xd3, 0x99, 0x35,
	0x19, 0xbe, 0xd7, 0x90, 0x37, 0x10, 0xeb, 0x4a, 0x39, 0x7d, 0x6c, 0xf5, 0x27, 0x3b, 0xfd, 0x95,
	0x4b, 0xf0, 0x9d, 0xc2, 0x5c, 0xbd, 0x2c, 0x56, 0x45, 0x45, 0x7b, 0xad, 0x86, 0x1d, 0x32, 0x0f,
	0x96, 0x2a, 0x17, 0x6a, 0xb2, 0xa1, 0xd0, 0x6a, 0xcc, 0xc3, 0xf4, 0x3d, 0xc4, 0xbe, 0x01, 0x42,
	0x01, 0x97, 0xd7, 0x2b, 0x61, 0xc7, 0xeb, 0x85, 0x96, 0x90, 0x17, 0x10, 0x2c, 0xe5, 0x67, 0x3b,
	0x54, 0x5f, 0xdf, 0x00, 0x73, 0xe2, 0xae, 0x58, 0xdc, 0xfd, 0x31, 0x4b, 0x4b, 0xd2, 0x73, 0x88,
	0x9a, 0x46, 0xff, 0x51, 0x96, 0x41, 0x3c, 0x97, 0x65, 0xf5, 0x41, 0xaa, 0xdc, 0xd6, 0xf6, 0xd9,
	0x1d, 0x4d, 0xbf, 0x21, 0x6f, 0xbf, 0x5e, 0x1f, 0xb0, 0xbf, 0x65, 0x6d, 0xf7, 0xa0, 0xb5, 0xc1,
	0x01, 0x6b, 0x71, 0xdb, 0xda, 0x57, 0x10, 0xda, 0xaf, 0x4a, 0x43, 0x86, 0xb2, 0xe3, 0xb3, 0xff,
	0x47, 0xfe, 0xe3, 0x9e, 0x9b, 0x95, 0xbb, 0x24, 0x79, 0x0d, 0x38, 0x97, 0x73, 0x4d, 0x8f, 0xfe,
	0xf2, 0x77, 0x2a, 0xe7, 0xf5, 0x4a, 0x94, 0x15, 0xb7, 0xe9, 0xf4, 0x2d, 0xc4, 0x9e, 0x98, 0xeb,
	0xac, 0x0f, 0x14, 0xb9, 0xeb, 0x6c, 0x40, 0x4e, 0x20, 0xf8, 0x28, 0x36, 0xf6, 0x11, 0x7d, 0x6e,
	0xb6, 0x84, 0x42, 0x74, 0xfb, 0xe9, 0xf2, 0xba, 0x50, 0x9a, 0x06, 0x2c, 0xc8, 0xfa, 0xdc, 0x87,
	0x93, 0xc1, 0xe3, 0xcf, 0xa4, 0xf3, 0xb0, 0x4d, 0xd0, 0xe3, 0x36, 0x41, 0x3f, 0xb6, 0x09, 0xfa,
	0xfa, 0x2b, 0xe9, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x0a, 0xd9, 0x8e, 0x7a, 0x03, 0x00,
	0x00,
}
