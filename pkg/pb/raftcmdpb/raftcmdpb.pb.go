// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raftcmdpb.proto

/*
	Package raftcmdpb is a generated protocol buffer package.

	It is generated from these files:
		raftcmdpb.proto

	It has these top-level messages:
		RaftRequestHeader
		RaftResponseHeader
		RaftCMDRequest
		RaftCMDResponse
		AdminRequest
		AdminResponse
		ChangePeerRequest
		ChangePeerResponse
		SplitRequest
		SplitResponse
		TransferLeaderRequest
		TransferLeaderResponse
		RaftLogGCRequest
		RaftLogGCResponse
		FVPair
		ScorePair
		Request
		Response
*/
package raftcmdpb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	metapb "github.com/deepfabric/elasticell/pkg/pb/metapb"

	pdpb "github.com/deepfabric/elasticell/pkg/pb/pdpb"

	errorpb "github.com/deepfabric/elasticell/pkg/pb/errorpb"

	querypb "github.com/deepfabric/elasticell/pkg/pb/querypb"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CMDType int32

const (
	Invalid   CMDType = 0
	RaftError CMDType = 1
	Snap      CMDType = 2
	// common
	Ping CMDType = 100
	Del  CMDType = 101
	// kv
	Set      CMDType = 200
	Get      CMDType = 201
	MSet     CMDType = 202
	MGet     CMDType = 203
	Incrby   CMDType = 204
	Decrby   CMDType = 205
	GetSet   CMDType = 206
	Append   CMDType = 207
	Setnx    CMDType = 208
	StrLen   CMDType = 209
	Incr     CMDType = 210
	Decr     CMDType = 211
	SetRange CMDType = 212
	MSetNX   CMDType = 213
	// Hash
	HSet    CMDType = 300
	HGet    CMDType = 301
	HDel    CMDType = 302
	HExists CMDType = 303
	HKeys   CMDType = 304
	HVals   CMDType = 305
	HGetAll CMDType = 306
	HLen    CMDType = 307
	HMGet   CMDType = 308
	HMSet   CMDType = 309
	HSetNX  CMDType = 310
	HStrLen CMDType = 311
	HIncrBy CMDType = 312
	// lists
	LIndex    CMDType = 400
	LInsert   CMDType = 401
	LLEN      CMDType = 402
	LPop      CMDType = 403
	LPush     CMDType = 404
	LPushX    CMDType = 405
	LRange    CMDType = 406
	LRem      CMDType = 407
	LSet      CMDType = 408
	LTrim     CMDType = 409
	RPop      CMDType = 410
	RPopLPush CMDType = 411
	RPush     CMDType = 412
	RPushX    CMDType = 413
	// sets
	SAdd      CMDType = 500
	SCard     CMDType = 501
	SRem      CMDType = 502
	SMembers  CMDType = 503
	SIsMember CMDType = 504
	SPop      CMDType = 505
	// zsets
	ZAdd             CMDType = 600
	ZCard            CMDType = 601
	ZCount           CMDType = 602
	ZIncrBy          CMDType = 603
	ZLexCount        CMDType = 604
	ZRange           CMDType = 605
	ZRangeByLex      CMDType = 606
	ZRangeByScore    CMDType = 607
	ZRank            CMDType = 608
	ZRem             CMDType = 609
	ZRemRangeByLex   CMDType = 611
	ZRemRangeByRank  CMDType = 612
	ZRemRangeByScore CMDType = 613
	ZScore           CMDType = 614
)

var CMDType_name = map[int32]string{
	0:   "Invalid",
	1:   "RaftError",
	2:   "Snap",
	100: "Ping",
	101: "Del",
	200: "Set",
	201: "Get",
	202: "MSet",
	203: "MGet",
	204: "Incrby",
	205: "Decrby",
	206: "GetSet",
	207: "Append",
	208: "Setnx",
	209: "StrLen",
	210: "Incr",
	211: "Decr",
	212: "SetRange",
	213: "MSetNX",
	300: "HSet",
	301: "HGet",
	302: "HDel",
	303: "HExists",
	304: "HKeys",
	305: "HVals",
	306: "HGetAll",
	307: "HLen",
	308: "HMGet",
	309: "HMSet",
	310: "HSetNX",
	311: "HStrLen",
	312: "HIncrBy",
	400: "LIndex",
	401: "LInsert",
	402: "LLEN",
	403: "LPop",
	404: "LPush",
	405: "LPushX",
	406: "LRange",
	407: "LRem",
	408: "LSet",
	409: "LTrim",
	410: "RPop",
	411: "RPopLPush",
	412: "RPush",
	413: "RPushX",
	500: "SAdd",
	501: "SCard",
	502: "SRem",
	503: "SMembers",
	504: "SIsMember",
	505: "SPop",
	600: "ZAdd",
	601: "ZCard",
	602: "ZCount",
	603: "ZIncrBy",
	604: "ZLexCount",
	605: "ZRange",
	606: "ZRangeByLex",
	607: "ZRangeByScore",
	608: "ZRank",
	609: "ZRem",
	611: "ZRemRangeByLex",
	612: "ZRemRangeByRank",
	613: "ZRemRangeByScore",
	614: "ZScore",
}
var CMDType_value = map[string]int32{
	"Invalid":          0,
	"RaftError":        1,
	"Snap":             2,
	"Ping":             100,
	"Del":              101,
	"Set":              200,
	"Get":              201,
	"MSet":             202,
	"MGet":             203,
	"Incrby":           204,
	"Decrby":           205,
	"GetSet":           206,
	"Append":           207,
	"Setnx":            208,
	"StrLen":           209,
	"Incr":             210,
	"Decr":             211,
	"SetRange":         212,
	"MSetNX":           213,
	"HSet":             300,
	"HGet":             301,
	"HDel":             302,
	"HExists":          303,
	"HKeys":            304,
	"HVals":            305,
	"HGetAll":          306,
	"HLen":             307,
	"HMGet":            308,
	"HMSet":            309,
	"HSetNX":           310,
	"HStrLen":          311,
	"HIncrBy":          312,
	"LIndex":           400,
	"LInsert":          401,
	"LLEN":             402,
	"LPop":             403,
	"LPush":            404,
	"LPushX":           405,
	"LRange":           406,
	"LRem":             407,
	"LSet":             408,
	"LTrim":            409,
	"RPop":             410,
	"RPopLPush":        411,
	"RPush":            412,
	"RPushX":           413,
	"SAdd":             500,
	"SCard":            501,
	"SRem":             502,
	"SMembers":         503,
	"SIsMember":        504,
	"SPop":             505,
	"ZAdd":             600,
	"ZCard":            601,
	"ZCount":           602,
	"ZIncrBy":          603,
	"ZLexCount":        604,
	"ZRange":           605,
	"ZRangeByLex":      606,
	"ZRangeByScore":    607,
	"ZRank":            608,
	"ZRem":             609,
	"ZRemRangeByLex":   611,
	"ZRemRangeByRank":  612,
	"ZRemRangeByScore": 613,
	"ZScore":           614,
}

func (x CMDType) Enum() *CMDType {
	p := new(CMDType)
	*p = x
	return p
}
func (x CMDType) String() string {
	return proto.EnumName(CMDType_name, int32(x))
}
func (x *CMDType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMDType_value, data, "CMDType")
	if err != nil {
		return err
	}
	*x = CMDType(value)
	return nil
}
func (CMDType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{0} }

type AdminCmdType int32

const (
	InvalidAdmin   AdminCmdType = 0
	ChangePeer     AdminCmdType = 1
	Split          AdminCmdType = 2
	RaftLogGC      AdminCmdType = 3
	TransferLeader AdminCmdType = 4
	ComputeHash    AdminCmdType = 5
	VerifyHash     AdminCmdType = 6
)

var AdminCmdType_name = map[int32]string{
	0: "InvalidAdmin",
	1: "ChangePeer",
	2: "Split",
	3: "RaftLogGC",
	4: "TransferLeader",
	5: "ComputeHash",
	6: "VerifyHash",
}
var AdminCmdType_value = map[string]int32{
	"InvalidAdmin":   0,
	"ChangePeer":     1,
	"Split":          2,
	"RaftLogGC":      3,
	"TransferLeader": 4,
	"ComputeHash":    5,
	"VerifyHash":     6,
}

func (x AdminCmdType) Enum() *AdminCmdType {
	p := new(AdminCmdType)
	*p = x
	return p
}
func (x AdminCmdType) String() string {
	return proto.EnumName(AdminCmdType_name, int32(x))
}
func (x *AdminCmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AdminCmdType_value, data, "AdminCmdType")
	if err != nil {
		return err
	}
	*x = AdminCmdType(value)
	return nil
}
func (AdminCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{1} }

type RaftRequestHeader struct {
	CellId uint64      `protobuf:"varint,1,opt,name=cellId" json:"cellId"`
	Peer   metapb.Peer `protobuf:"bytes,2,opt,name=peer" json:"peer"`
	// true for read linearizati
	ReadQuorum bool `protobuf:"varint,3,opt,name=readQuorum" json:"readQuorum"`
	// 16 bytes, to distinguish request.
	UUID             []byte           `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	CellEpoch        metapb.CellEpoch `protobuf:"bytes,5,opt,name=cellEpoch" json:"cellEpoch"`
	Term             uint64           `protobuf:"varint,6,opt,name=term" json:"term"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *RaftRequestHeader) Reset()                    { *m = RaftRequestHeader{} }
func (m *RaftRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RaftRequestHeader) ProtoMessage()               {}
func (*RaftRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{0} }

func (m *RaftRequestHeader) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return 0
}

func (m *RaftRequestHeader) GetPeer() metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return metapb.Peer{}
}

func (m *RaftRequestHeader) GetReadQuorum() bool {
	if m != nil {
		return m.ReadQuorum
	}
	return false
}

func (m *RaftRequestHeader) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *RaftRequestHeader) GetCellEpoch() metapb.CellEpoch {
	if m != nil {
		return m.CellEpoch
	}
	return metapb.CellEpoch{}
}

func (m *RaftRequestHeader) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type RaftResponseHeader struct {
	Error            errorpb.Error `protobuf:"bytes,1,opt,name=error" json:"error"`
	UUID             []byte        `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
	CurrentTerm      uint64        `protobuf:"varint,3,opt,name=currentTerm" json:"currentTerm"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *RaftResponseHeader) Reset()                    { *m = RaftResponseHeader{} }
func (m *RaftResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*RaftResponseHeader) ProtoMessage()               {}
func (*RaftResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{1} }

func (m *RaftResponseHeader) GetError() errorpb.Error {
	if m != nil {
		return m.Error
	}
	return errorpb.Error{}
}

func (m *RaftResponseHeader) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *RaftResponseHeader) GetCurrentTerm() uint64 {
	if m != nil {
		return m.CurrentTerm
	}
	return 0
}

// RaftCMDRequest we can't include both normal requests and administrator request
// at same time.
type RaftCMDRequest struct {
	Header           *RaftRequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Requests         []*Request         `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
	AdminRequest     *AdminRequest      `protobuf:"bytes,3,opt,name=adminRequest" json:"adminRequest,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *RaftCMDRequest) Reset()                    { *m = RaftCMDRequest{} }
func (m *RaftCMDRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftCMDRequest) ProtoMessage()               {}
func (*RaftCMDRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{2} }

func (m *RaftCMDRequest) GetHeader() *RaftRequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RaftCMDRequest) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *RaftCMDRequest) GetAdminRequest() *AdminRequest {
	if m != nil {
		return m.AdminRequest
	}
	return nil
}

type RaftCMDResponse struct {
	Header           *RaftResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Responses        []*Response         `protobuf:"bytes,2,rep,name=responses" json:"responses,omitempty"`
	AdminResponse    *AdminResponse      `protobuf:"bytes,3,opt,name=adminResponse" json:"adminResponse,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *RaftCMDResponse) Reset()                    { *m = RaftCMDResponse{} }
func (m *RaftCMDResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftCMDResponse) ProtoMessage()               {}
func (*RaftCMDResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{3} }

func (m *RaftCMDResponse) GetHeader() *RaftResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RaftCMDResponse) GetResponses() []*Response {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *RaftCMDResponse) GetAdminResponse() *AdminResponse {
	if m != nil {
		return m.AdminResponse
	}
	return nil
}

// admin request
type AdminRequest struct {
	Type             AdminCmdType `protobuf:"varint,1,opt,name=type,enum=raftcmdpb.AdminCmdType" json:"type"`
	Body             []byte       `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AdminRequest) Reset()                    { *m = AdminRequest{} }
func (m *AdminRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminRequest) ProtoMessage()               {}
func (*AdminRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{4} }

func (m *AdminRequest) GetType() AdminCmdType {
	if m != nil {
		return m.Type
	}
	return InvalidAdmin
}

func (m *AdminRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type AdminResponse struct {
	Type             AdminCmdType `protobuf:"varint,1,opt,name=type,enum=raftcmdpb.AdminCmdType" json:"type"`
	Body             []byte       `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AdminResponse) Reset()                    { *m = AdminResponse{} }
func (m *AdminResponse) String() string            { return proto.CompactTextString(m) }
func (*AdminResponse) ProtoMessage()               {}
func (*AdminResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{5} }

func (m *AdminResponse) GetType() AdminCmdType {
	if m != nil {
		return m.Type
	}
	return InvalidAdmin
}

func (m *AdminResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ChangePeerRequest struct {
	ChangeType       pdpb.ConfChangeType `protobuf:"varint,1,opt,name=changeType,enum=pdpb.ConfChangeType" json:"changeType"`
	Peer             metapb.Peer         `protobuf:"bytes,2,opt,name=peer" json:"peer"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *ChangePeerRequest) Reset()                    { *m = ChangePeerRequest{} }
func (m *ChangePeerRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePeerRequest) ProtoMessage()               {}
func (*ChangePeerRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{6} }

func (m *ChangePeerRequest) GetChangeType() pdpb.ConfChangeType {
	if m != nil {
		return m.ChangeType
	}
	return pdpb.AddNode
}

func (m *ChangePeerRequest) GetPeer() metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return metapb.Peer{}
}

type ChangePeerResponse struct {
	Cell             metapb.Cell `protobuf:"bytes,1,opt,name=cell" json:"cell"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ChangePeerResponse) Reset()                    { *m = ChangePeerResponse{} }
func (m *ChangePeerResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangePeerResponse) ProtoMessage()               {}
func (*ChangePeerResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{7} }

func (m *ChangePeerResponse) GetCell() metapb.Cell {
	if m != nil {
		return m.Cell
	}
	return metapb.Cell{}
}

type SplitRequest struct {
	// This can be only called in internal RaftStore now.
	// The splitKey must be in the been splitting cell.
	SplitKey []byte `protobuf:"bytes,1,opt,name=splitKey" json:"splitKey,omitempty"`
	// We split the cell into two, first uses the origin
	// parent cell id, and the second uses the new_cell_id.
	// We must guarantee that the new_cell_id is global unique.
	NewCellID uint64 `protobuf:"varint,2,opt,name=newCellID" json:"newCellID"`
	// The peer ids for the new split cell.
	NewPeerIDs []uint64 `protobuf:"varint,3,rep,name=newPeerIDs" json:"newPeerIDs,omitempty"`
	// If true, right cell derive the origin cell_id,
	// left cell use new_cell_id.
	RightDerive      bool   `protobuf:"varint,4,opt,name=rightDerive" json:"rightDerive"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SplitRequest) Reset()                    { *m = SplitRequest{} }
func (m *SplitRequest) String() string            { return proto.CompactTextString(m) }
func (*SplitRequest) ProtoMessage()               {}
func (*SplitRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{8} }

func (m *SplitRequest) GetSplitKey() []byte {
	if m != nil {
		return m.SplitKey
	}
	return nil
}

func (m *SplitRequest) GetNewCellID() uint64 {
	if m != nil {
		return m.NewCellID
	}
	return 0
}

func (m *SplitRequest) GetNewPeerIDs() []uint64 {
	if m != nil {
		return m.NewPeerIDs
	}
	return nil
}

func (m *SplitRequest) GetRightDerive() bool {
	if m != nil {
		return m.RightDerive
	}
	return false
}

type SplitResponse struct {
	Left             metapb.Cell `protobuf:"bytes,1,opt,name=left" json:"left"`
	Right            metapb.Cell `protobuf:"bytes,2,opt,name=right" json:"right"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SplitResponse) Reset()                    { *m = SplitResponse{} }
func (m *SplitResponse) String() string            { return proto.CompactTextString(m) }
func (*SplitResponse) ProtoMessage()               {}
func (*SplitResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{9} }

func (m *SplitResponse) GetLeft() metapb.Cell {
	if m != nil {
		return m.Left
	}
	return metapb.Cell{}
}

func (m *SplitResponse) GetRight() metapb.Cell {
	if m != nil {
		return m.Right
	}
	return metapb.Cell{}
}

type TransferLeaderRequest struct {
	Peer             metapb.Peer `protobuf:"bytes,1,opt,name=peer" json:"peer"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TransferLeaderRequest) Reset()                    { *m = TransferLeaderRequest{} }
func (m *TransferLeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferLeaderRequest) ProtoMessage()               {}
func (*TransferLeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{10} }

func (m *TransferLeaderRequest) GetPeer() metapb.Peer {
	if m != nil {
		return m.Peer
	}
	return metapb.Peer{}
}

type TransferLeaderResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *TransferLeaderResponse) Reset()                    { *m = TransferLeaderResponse{} }
func (m *TransferLeaderResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferLeaderResponse) ProtoMessage()               {}
func (*TransferLeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{11} }

type RaftLogGCRequest struct {
	CompactIndex     uint64 `protobuf:"varint,1,opt,name=compactIndex" json:"compactIndex"`
	CompactTerm      uint64 `protobuf:"varint,2,opt,name=compactTerm" json:"compactTerm"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RaftLogGCRequest) Reset()                    { *m = RaftLogGCRequest{} }
func (m *RaftLogGCRequest) String() string            { return proto.CompactTextString(m) }
func (*RaftLogGCRequest) ProtoMessage()               {}
func (*RaftLogGCRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{12} }

func (m *RaftLogGCRequest) GetCompactIndex() uint64 {
	if m != nil {
		return m.CompactIndex
	}
	return 0
}

func (m *RaftLogGCRequest) GetCompactTerm() uint64 {
	if m != nil {
		return m.CompactTerm
	}
	return 0
}

type RaftLogGCResponse struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RaftLogGCResponse) Reset()                    { *m = RaftLogGCResponse{} }
func (m *RaftLogGCResponse) String() string            { return proto.CompactTextString(m) }
func (*RaftLogGCResponse) ProtoMessage()               {}
func (*RaftLogGCResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{13} }

type FVPair struct {
	Field            []byte `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Value            []byte `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FVPair) Reset()                    { *m = FVPair{} }
func (m *FVPair) String() string            { return proto.CompactTextString(m) }
func (*FVPair) ProtoMessage()               {}
func (*FVPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{14} }

func (m *FVPair) GetField() []byte {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *FVPair) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ScorePair struct {
	Score            float64 `protobuf:"fixed64,1,opt,name=score" json:"score"`
	Member           []byte  `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ScorePair) Reset()                    { *m = ScorePair{} }
func (m *ScorePair) String() string            { return proto.CompactTextString(m) }
func (*ScorePair) ProtoMessage()               {}
func (*ScorePair) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{15} }

func (m *ScorePair) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ScorePair) GetMember() []byte {
	if m != nil {
		return m.Member
	}
	return nil
}

type Request struct {
	UUID             []byte   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Type             CMDType  `protobuf:"varint,2,opt,name=type,enum=raftcmdpb.CMDType" json:"type"`
	Cmd              [][]byte `protobuf:"bytes,3,rep,name=cmd" json:"cmd,omitempty"`
	Epoch            uint64   `protobuf:"varint,4,opt,name=epoch" json:"epoch"`
	StartAt          int64    `protobuf:"varint,5,opt,name=startAt" json:"startAt"`
	LastStageAt      int64    `protobuf:"varint,6,opt,name=lastStageAt" json:"lastStageAt"`
	SessionID        int64    `protobuf:"varint,7,opt,name=sessionID" json:"sessionID"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{16} }

func (m *Request) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *Request) GetType() CMDType {
	if m != nil {
		return m.Type
	}
	return Invalid
}

func (m *Request) GetCmd() [][]byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *Request) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Request) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *Request) GetLastStageAt() int64 {
	if m != nil {
		return m.LastStageAt
	}
	return 0
}

func (m *Request) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

type Response struct {
	UUID                         []byte              `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Type                         CMDType             `protobuf:"varint,2,opt,name=type,enum=raftcmdpb.CMDType" json:"type"`
	ErrorResult                  []byte              `protobuf:"bytes,3,opt,name=errorResult" json:"errorResult,omitempty"`
	ErrorResults                 [][]byte            `protobuf:"bytes,4,rep,name=errorResults" json:"errorResults,omitempty"`
	StatusResult                 []byte              `protobuf:"bytes,5,opt,name=statusResult" json:"statusResult,omitempty"`
	IntegerResult                *int64              `protobuf:"varint,6,opt,name=integerResult" json:"integerResult,omitempty"`
	BulkResult                   []byte              `protobuf:"bytes,7,opt,name=bulkResult" json:"bulkResult,omitempty"`
	HasEmptyBulkResult           *bool               `protobuf:"varint,8,opt,name=hasEmptyBulkResult" json:"hasEmptyBulkResult,omitempty"`
	SliceArrayResult             [][]byte            `protobuf:"bytes,9,rep,name=sliceArrayResult" json:"sliceArrayResult,omitempty"`
	HasEmptySliceArrayResult     *bool               `protobuf:"varint,10,opt,name=hasEmptySliceArrayResult" json:"hasEmptySliceArrayResult,omitempty"`
	FvPairArrayResult            []*FVPair           `protobuf:"bytes,11,rep,name=fvPairArrayResult" json:"fvPairArrayResult,omitempty"`
	HasEmptyFVPairArrayResult    *bool               `protobuf:"varint,12,opt,name=hasEmptyFVPairArrayResult" json:"hasEmptyFVPairArrayResult,omitempty"`
	ScorePairArrayResult         []*ScorePair        `protobuf:"bytes,13,rep,name=scorePairArrayResult" json:"scorePairArrayResult,omitempty"`
	HasEmptyScorePairArrayResult *bool               `protobuf:"varint,14,opt,name=hasEmptyScorePairArrayResult" json:"hasEmptyScorePairArrayResult,omitempty"`
	Withscores                   *bool               `protobuf:"varint,15,opt,name=withscores" json:"withscores,omitempty"`
	OriginRequest                *Request            `protobuf:"bytes,16,opt,name=originRequest" json:"originRequest,omitempty"`
	SessionID                    int64               `protobuf:"varint,17,opt,name=sessionID" json:"sessionID"`
	DocArrayResult               []*querypb.Document `protobuf:"bytes,18,rep,name=docArrayResult" json:"docArrayResult,omitempty"`
	HasEmptyDocArrayResult       *bool               `protobuf:"varint,19,opt,name=hasEmptyDocArrayResult" json:"hasEmptyDocArrayResult,omitempty"`
	Error                        errorpb.Error       `protobuf:"bytes,20,opt,name=error" json:"error"`
	XXX_unrecognized             []byte              `json:"-"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmdpb, []int{17} }

func (m *Response) GetUUID() []byte {
	if m != nil {
		return m.UUID
	}
	return nil
}

func (m *Response) GetType() CMDType {
	if m != nil {
		return m.Type
	}
	return Invalid
}

func (m *Response) GetErrorResult() []byte {
	if m != nil {
		return m.ErrorResult
	}
	return nil
}

func (m *Response) GetErrorResults() [][]byte {
	if m != nil {
		return m.ErrorResults
	}
	return nil
}

func (m *Response) GetStatusResult() []byte {
	if m != nil {
		return m.StatusResult
	}
	return nil
}

func (m *Response) GetIntegerResult() int64 {
	if m != nil && m.IntegerResult != nil {
		return *m.IntegerResult
	}
	return 0
}

func (m *Response) GetBulkResult() []byte {
	if m != nil {
		return m.BulkResult
	}
	return nil
}

func (m *Response) GetHasEmptyBulkResult() bool {
	if m != nil && m.HasEmptyBulkResult != nil {
		return *m.HasEmptyBulkResult
	}
	return false
}

func (m *Response) GetSliceArrayResult() [][]byte {
	if m != nil {
		return m.SliceArrayResult
	}
	return nil
}

func (m *Response) GetHasEmptySliceArrayResult() bool {
	if m != nil && m.HasEmptySliceArrayResult != nil {
		return *m.HasEmptySliceArrayResult
	}
	return false
}

func (m *Response) GetFvPairArrayResult() []*FVPair {
	if m != nil {
		return m.FvPairArrayResult
	}
	return nil
}

func (m *Response) GetHasEmptyFVPairArrayResult() bool {
	if m != nil && m.HasEmptyFVPairArrayResult != nil {
		return *m.HasEmptyFVPairArrayResult
	}
	return false
}

func (m *Response) GetScorePairArrayResult() []*ScorePair {
	if m != nil {
		return m.ScorePairArrayResult
	}
	return nil
}

func (m *Response) GetHasEmptyScorePairArrayResult() bool {
	if m != nil && m.HasEmptyScorePairArrayResult != nil {
		return *m.HasEmptyScorePairArrayResult
	}
	return false
}

func (m *Response) GetWithscores() bool {
	if m != nil && m.Withscores != nil {
		return *m.Withscores
	}
	return false
}

func (m *Response) GetOriginRequest() *Request {
	if m != nil {
		return m.OriginRequest
	}
	return nil
}

func (m *Response) GetSessionID() int64 {
	if m != nil {
		return m.SessionID
	}
	return 0
}

func (m *Response) GetDocArrayResult() []*querypb.Document {
	if m != nil {
		return m.DocArrayResult
	}
	return nil
}

func (m *Response) GetHasEmptyDocArrayResult() bool {
	if m != nil && m.HasEmptyDocArrayResult != nil {
		return *m.HasEmptyDocArrayResult
	}
	return false
}

func (m *Response) GetError() errorpb.Error {
	if m != nil {
		return m.Error
	}
	return errorpb.Error{}
}

func init() {
	proto.RegisterType((*RaftRequestHeader)(nil), "raftcmdpb.RaftRequestHeader")
	proto.RegisterType((*RaftResponseHeader)(nil), "raftcmdpb.RaftResponseHeader")
	proto.RegisterType((*RaftCMDRequest)(nil), "raftcmdpb.RaftCMDRequest")
	proto.RegisterType((*RaftCMDResponse)(nil), "raftcmdpb.RaftCMDResponse")
	proto.RegisterType((*AdminRequest)(nil), "raftcmdpb.AdminRequest")
	proto.RegisterType((*AdminResponse)(nil), "raftcmdpb.AdminResponse")
	proto.RegisterType((*ChangePeerRequest)(nil), "raftcmdpb.ChangePeerRequest")
	proto.RegisterType((*ChangePeerResponse)(nil), "raftcmdpb.ChangePeerResponse")
	proto.RegisterType((*SplitRequest)(nil), "raftcmdpb.SplitRequest")
	proto.RegisterType((*SplitResponse)(nil), "raftcmdpb.SplitResponse")
	proto.RegisterType((*TransferLeaderRequest)(nil), "raftcmdpb.TransferLeaderRequest")
	proto.RegisterType((*TransferLeaderResponse)(nil), "raftcmdpb.TransferLeaderResponse")
	proto.RegisterType((*RaftLogGCRequest)(nil), "raftcmdpb.RaftLogGCRequest")
	proto.RegisterType((*RaftLogGCResponse)(nil), "raftcmdpb.RaftLogGCResponse")
	proto.RegisterType((*FVPair)(nil), "raftcmdpb.FVPair")
	proto.RegisterType((*ScorePair)(nil), "raftcmdpb.ScorePair")
	proto.RegisterType((*Request)(nil), "raftcmdpb.Request")
	proto.RegisterType((*Response)(nil), "raftcmdpb.Response")
	proto.RegisterEnum("raftcmdpb.CMDType", CMDType_name, CMDType_value)
	proto.RegisterEnum("raftcmdpb.AdminCmdType", AdminCmdType_name, AdminCmdType_value)
}
func (m *RaftRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.CellId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Peer.Size()))
	n1, err := m.Peer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x18
	i++
	if m.ReadQuorum {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.UUID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.CellEpoch.Size()))
	n2, err := m.CellEpoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x30
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Term))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Error.Size()))
	n3, err := m.Error.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.UUID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.CurrentTerm))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftCMDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCMDRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdminRequest != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.AdminRequest.Size()))
		n5, err := m.AdminRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftCMDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCMDResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Header.Size()))
		n6, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdminResponse != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.AdminResponse.Size()))
		n7, err := m.AdminResponse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Type))
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Type))
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangePeerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePeerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.ChangeType))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Peer.Size()))
	n8, err := m.Peer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangePeerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangePeerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Cell.Size()))
	n9, err := m.Cell.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SplitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SplitKey != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.SplitKey)))
		i += copy(dAtA[i:], m.SplitKey)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.NewCellID))
	if len(m.NewPeerIDs) > 0 {
		for _, num := range m.NewPeerIDs {
			dAtA[i] = 0x18
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x20
	i++
	if m.RightDerive {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SplitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Left.Size()))
	n10, err := m.Left.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x12
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Right.Size()))
	n11, err := m.Right.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Peer.Size()))
	n12, err := m.Peer.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftLogGCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogGCRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.CompactIndex))
	dAtA[i] = 0x10
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.CompactTerm))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftLogGCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLogGCResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FVPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FVPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ScorePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScorePair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x9
	i++
	i = encodeFixed64Raftcmdpb(dAtA, i, uint64(math.Float64bits(float64(m.Score))))
	if m.Member != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.Member)))
		i += copy(dAtA[i:], m.Member)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UUID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Type))
	if len(m.Cmd) > 0 {
		for _, b := range m.Cmd {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Epoch))
	dAtA[i] = 0x28
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.StartAt))
	dAtA[i] = 0x30
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.LastStageAt))
	dAtA[i] = 0x38
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.SessionID))
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UUID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.UUID)))
		i += copy(dAtA[i:], m.UUID)
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Type))
	if m.ErrorResult != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.ErrorResult)))
		i += copy(dAtA[i:], m.ErrorResult)
	}
	if len(m.ErrorResults) > 0 {
		for _, b := range m.ErrorResults {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.StatusResult != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.StatusResult)))
		i += copy(dAtA[i:], m.StatusResult)
	}
	if m.IntegerResult != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(*m.IntegerResult))
	}
	if m.BulkResult != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(m.BulkResult)))
		i += copy(dAtA[i:], m.BulkResult)
	}
	if m.HasEmptyBulkResult != nil {
		dAtA[i] = 0x40
		i++
		if *m.HasEmptyBulkResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SliceArrayResult) > 0 {
		for _, b := range m.SliceArrayResult {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.HasEmptySliceArrayResult != nil {
		dAtA[i] = 0x50
		i++
		if *m.HasEmptySliceArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FvPairArrayResult) > 0 {
		for _, msg := range m.FvPairArrayResult {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasEmptyFVPairArrayResult != nil {
		dAtA[i] = 0x60
		i++
		if *m.HasEmptyFVPairArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ScorePairArrayResult) > 0 {
		for _, msg := range m.ScorePairArrayResult {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasEmptyScorePairArrayResult != nil {
		dAtA[i] = 0x70
		i++
		if *m.HasEmptyScorePairArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Withscores != nil {
		dAtA[i] = 0x78
		i++
		if *m.Withscores {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OriginRequest != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.OriginRequest.Size()))
		n13, err := m.OriginRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.SessionID))
	if len(m.DocArrayResult) > 0 {
		for _, msg := range m.DocArrayResult {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintRaftcmdpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HasEmptyDocArrayResult != nil {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if *m.HasEmptyDocArrayResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRaftcmdpb(dAtA, i, uint64(m.Error.Size()))
	n14, err := m.Error.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Raftcmdpb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Raftcmdpb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRaftcmdpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftRequestHeader) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRaftcmdpb(uint64(m.CellId))
	l = m.Peer.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	n += 2
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	l = m.CellEpoch.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	n += 1 + sovRaftcmdpb(uint64(m.Term))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftResponseHeader) Size() (n int) {
	var l int
	_ = l
	l = m.Error.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	n += 1 + sovRaftcmdpb(uint64(m.CurrentTerm))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftCMDRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.AdminRequest != nil {
		l = m.AdminRequest.Size()
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftCMDResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.AdminResponse != nil {
		l = m.AdminResponse.Size()
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRaftcmdpb(uint64(m.Type))
	if m.Body != nil {
		l = len(m.Body)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRaftcmdpb(uint64(m.Type))
	if m.Body != nil {
		l = len(m.Body)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangePeerRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRaftcmdpb(uint64(m.ChangeType))
	l = m.Peer.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangePeerResponse) Size() (n int) {
	var l int
	_ = l
	l = m.Cell.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplitRequest) Size() (n int) {
	var l int
	_ = l
	if m.SplitKey != nil {
		l = len(m.SplitKey)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	n += 1 + sovRaftcmdpb(uint64(m.NewCellID))
	if len(m.NewPeerIDs) > 0 {
		for _, e := range m.NewPeerIDs {
			n += 1 + sovRaftcmdpb(uint64(e))
		}
	}
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SplitResponse) Size() (n int) {
	var l int
	_ = l
	l = m.Left.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	l = m.Right.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferLeaderRequest) Size() (n int) {
	var l int
	_ = l
	l = m.Peer.Size()
	n += 1 + l + sovRaftcmdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferLeaderResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftLogGCRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRaftcmdpb(uint64(m.CompactIndex))
	n += 1 + sovRaftcmdpb(uint64(m.CompactTerm))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftLogGCResponse) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FVPair) Size() (n int) {
	var l int
	_ = l
	if m.Field != nil {
		l = len(m.Field)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScorePair) Size() (n int) {
	var l int
	_ = l
	n += 9
	if m.Member != nil {
		l = len(m.Member)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	n += 1 + sovRaftcmdpb(uint64(m.Type))
	if len(m.Cmd) > 0 {
		for _, b := range m.Cmd {
			l = len(b)
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	n += 1 + sovRaftcmdpb(uint64(m.Epoch))
	n += 1 + sovRaftcmdpb(uint64(m.StartAt))
	n += 1 + sovRaftcmdpb(uint64(m.LastStageAt))
	n += 1 + sovRaftcmdpb(uint64(m.SessionID))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.UUID != nil {
		l = len(m.UUID)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	n += 1 + sovRaftcmdpb(uint64(m.Type))
	if m.ErrorResult != nil {
		l = len(m.ErrorResult)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if len(m.ErrorResults) > 0 {
		for _, b := range m.ErrorResults {
			l = len(b)
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.StatusResult != nil {
		l = len(m.StatusResult)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.IntegerResult != nil {
		n += 1 + sovRaftcmdpb(uint64(*m.IntegerResult))
	}
	if m.BulkResult != nil {
		l = len(m.BulkResult)
		n += 1 + l + sovRaftcmdpb(uint64(l))
	}
	if m.HasEmptyBulkResult != nil {
		n += 2
	}
	if len(m.SliceArrayResult) > 0 {
		for _, b := range m.SliceArrayResult {
			l = len(b)
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.HasEmptySliceArrayResult != nil {
		n += 2
	}
	if len(m.FvPairArrayResult) > 0 {
		for _, e := range m.FvPairArrayResult {
			l = e.Size()
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.HasEmptyFVPairArrayResult != nil {
		n += 2
	}
	if len(m.ScorePairArrayResult) > 0 {
		for _, e := range m.ScorePairArrayResult {
			l = e.Size()
			n += 1 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.HasEmptyScorePairArrayResult != nil {
		n += 2
	}
	if m.Withscores != nil {
		n += 2
	}
	if m.OriginRequest != nil {
		l = m.OriginRequest.Size()
		n += 2 + l + sovRaftcmdpb(uint64(l))
	}
	n += 2 + sovRaftcmdpb(uint64(m.SessionID))
	if len(m.DocArrayResult) > 0 {
		for _, e := range m.DocArrayResult {
			l = e.Size()
			n += 2 + l + sovRaftcmdpb(uint64(l))
		}
	}
	if m.HasEmptyDocArrayResult != nil {
		n += 3
	}
	l = m.Error.Size()
	n += 2 + l + sovRaftcmdpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftcmdpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftcmdpb(x uint64) (n int) {
	return sovRaftcmdpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			m.CellId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadQuorum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReadQuorum = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CellEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTerm", wireType)
			}
			m.CurrentTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCMDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCMDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCMDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RaftRequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &Request{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRequest == nil {
				m.AdminRequest = &AdminRequest{}
			}
			if err := m.AdminRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCMDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCMDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCMDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RaftResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &Response{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminResponse == nil {
				m.AdminResponse = &AdminResponse{}
			}
			if err := m.AdminResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AdminCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (AdminCmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePeerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePeerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePeerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= (pdpb.ConfChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangePeerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangePeerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangePeerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitKey = append(m.SplitKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SplitKey == nil {
				m.SplitKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCellID", wireType)
			}
			m.NewCellID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCellID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftcmdpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewPeerIDs = append(m.NewPeerIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftcmdpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaftcmdpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftcmdpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewPeerIDs = append(m.NewPeerIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPeerIDs", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightDerive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RightDerive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Left.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Right.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogGCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogGCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogGCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactIndex", wireType)
			}
			m.CompactIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactTerm", wireType)
			}
			m.CompactTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLogGCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLogGCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLogGCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FVPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FVPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FVPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = append(m.Field[:0], dAtA[iNdEx:postIndex]...)
			if m.Field == nil {
				m.Field = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScorePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScorePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScorePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Score = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member[:0], dAtA[iNdEx:postIndex]...)
			if m.Member == nil {
				m.Member = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CMDType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = append(m.Cmd, make([]byte, postIndex-iNdEx))
			copy(m.Cmd[len(m.Cmd)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStageAt", wireType)
			}
			m.LastStageAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastStageAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = append(m.UUID[:0], dAtA[iNdEx:postIndex]...)
			if m.UUID == nil {
				m.UUID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CMDType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResult = append(m.ErrorResult[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrorResult == nil {
				m.ErrorResult = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorResults", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorResults = append(m.ErrorResults, make([]byte, postIndex-iNdEx))
			copy(m.ErrorResults[len(m.ErrorResults)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusResult = append(m.StatusResult[:0], dAtA[iNdEx:postIndex]...)
			if m.StatusResult == nil {
				m.StatusResult = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegerResult", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntegerResult = &v
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulkResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BulkResult = append(m.BulkResult[:0], dAtA[iNdEx:postIndex]...)
			if m.BulkResult == nil {
				m.BulkResult = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyBulkResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasEmptyBulkResult = &b
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceArrayResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceArrayResult = append(m.SliceArrayResult, make([]byte, postIndex-iNdEx))
			copy(m.SliceArrayResult[len(m.SliceArrayResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptySliceArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasEmptySliceArrayResult = &b
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FvPairArrayResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FvPairArrayResult = append(m.FvPairArrayResult, &FVPair{})
			if err := m.FvPairArrayResult[len(m.FvPairArrayResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyFVPairArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasEmptyFVPairArrayResult = &b
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScorePairArrayResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScorePairArrayResult = append(m.ScorePairArrayResult, &ScorePair{})
			if err := m.ScorePairArrayResult[len(m.ScorePairArrayResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyScorePairArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasEmptyScorePairArrayResult = &b
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withscores", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Withscores = &b
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginRequest == nil {
				m.OriginRequest = &Request{}
			}
			if err := m.OriginRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			m.SessionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocArrayResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocArrayResult = append(m.DocArrayResult, &querypb.Document{})
			if err := m.DocArrayResult[len(m.DocArrayResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEmptyDocArrayResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.HasEmptyDocArrayResult = &b
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmdpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmdpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftcmdpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftcmdpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmdpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftcmdpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftcmdpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftcmdpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftcmdpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftcmdpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raftcmdpb.proto", fileDescriptorRaftcmdpb) }

var fileDescriptorRaftcmdpb = []byte{
	// 1735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x49, 0x8f, 0x1b, 0xc7,
	0x15, 0x9e, 0x66, 0x37, 0x87, 0xe4, 0xe3, 0x32, 0x35, 0x35, 0x94, 0xc2, 0x0c, 0x94, 0xf1, 0xa0,
	0x61, 0x08, 0x84, 0x10, 0xcc, 0x20, 0x82, 0x93, 0x20, 0x8e, 0x11, 0x81, 0x43, 0x4e, 0x34, 0x84,
	0x29, 0x63, 0xd2, 0x1c, 0x09, 0xc6, 0xdc, 0x9a, 0xec, 0x22, 0xd9, 0x30, 0xd9, 0xdd, 0xae, 0x2e,
	0x4a, 0xc3, 0x53, 0x6e, 0x39, 0x67, 0x75, 0x9c, 0xed, 0x1f, 0x64, 0xdf, 0xff, 0x40, 0x00, 0x65,
	0xb1, 0xa3, 0x6c, 0x40, 0x56, 0x45, 0x96, 0x93, 0x1c, 0x93, 0x4b, 0xd6, 0x5b, 0x50, 0xaf, 0xaa,
	0xc9, 0xe6, 0x2c, 0xb6, 0x0f, 0x3a, 0xf5, 0xab, 0xef, 0xbd, 0xf7, 0xbd, 0xa5, 0xeb, 0x55, 0x15,
	0xac, 0x71, 0x77, 0x20, 0xfa, 0x13, 0x2f, 0xea, 0xed, 0x44, 0x3c, 0x14, 0x21, 0x2d, 0xcc, 0x81,
	0xcd, 0x8d, 0x09, 0x13, 0x6e, 0xd4, 0xdb, 0x55, 0x1f, 0xa5, 0xdf, 0x5c, 0x8b, 0xbc, 0xa8, 0xb7,
	0x1b, 0xcd, 0x1d, 0x36, 0x2f, 0x31, 0xce, 0x43, 0x1e, 0xf5, 0x76, 0xf5, 0x57, 0xc3, 0xd5, 0x61,
	0x38, 0x0c, 0x51, 0xdc, 0x95, 0x52, 0x62, 0xfc, 0xf2, 0x94, 0xf1, 0x59, 0xd4, 0xdb, 0xd5, 0x5f,
	0x05, 0xdb, 0x7f, 0x37, 0x60, 0xdd, 0x71, 0x07, 0xc2, 0x61, 0x2f, 0x4f, 0x59, 0x2c, 0x0e, 0x98,
	0xeb, 0x31, 0x4e, 0xaf, 0xc0, 0x6a, 0x9f, 0x8d, 0xc7, 0x6d, 0xaf, 0x66, 0x6c, 0x1b, 0x75, 0x6b,
	0xcf, 0xba, 0xff, 0xf0, 0xa9, 0x15, 0x47, 0x63, 0xf4, 0x2a, 0x58, 0x11, 0x63, 0xbc, 0x96, 0xd9,
	0x36, 0xea, 0xc5, 0xeb, 0xa5, 0x1d, 0x9d, 0xe5, 0x21, 0x63, 0x5c, 0x5b, 0xa2, 0x9e, 0x3e, 0x0d,
	0xc0, 0x99, 0xeb, 0x7d, 0x6c, 0x1a, 0xf2, 0xe9, 0xa4, 0x66, 0x6e, 0x1b, 0xf5, 0xbc, 0xd6, 0xa7,
	0x70, 0x7a, 0x05, 0xac, 0xe9, 0xd4, 0xf7, 0x6a, 0xd6, 0xb6, 0x51, 0x2f, 0xed, 0xe5, 0x1f, 0x3f,
	0x7c, 0xca, 0xba, 0x7d, 0xbb, 0xdd, 0x72, 0x10, 0xa5, 0xef, 0x87, 0x82, 0x8c, 0xba, 0x1f, 0x85,
	0xfd, 0x51, 0x2d, 0x8b, 0x01, 0xd7, 0x93, 0x80, 0xcd, 0x44, 0xa1, 0x59, 0x17, 0x96, 0xb4, 0x06,
	0x96, 0x60, 0x7c, 0x52, 0x5b, 0x4d, 0xa5, 0x8f, 0x88, 0xfd, 0x09, 0x03, 0xa8, 0x2a, 0x38, 0x8e,
	0xc2, 0x20, 0x66, 0xba, 0xe2, 0x6b, 0x90, 0xc5, 0x2e, 0x62, 0xc1, 0xc5, 0xeb, 0x95, 0x9d, 0xa4,
	0xa7, 0xfb, 0xf2, 0xab, 0x19, 0x94, 0xc9, 0x3c, 0xe3, 0xcc, 0xb9, 0x19, 0x5f, 0x85, 0x62, 0x7f,
	0xca, 0x39, 0x0b, 0xc4, 0x91, 0xcc, 0xc0, 0x4c, 0x65, 0x90, 0x56, 0xd8, 0x3f, 0x32, 0xa0, 0x22,
	0x13, 0x69, 0xde, 0x6a, 0xe9, 0xe6, 0xd3, 0x67, 0x61, 0x75, 0x84, 0xe9, 0xe8, 0x2c, 0xae, 0xec,
	0x2c, 0xf6, 0xc8, 0x99, 0x9f, 0x84, 0x9c, 0x86, 0xa3, 0x3d, 0xe8, 0x33, 0x90, 0xe7, 0x4a, 0x1d,
	0xd7, 0x32, 0xdb, 0x66, 0xbd, 0x78, 0x9d, 0xa6, 0xbd, 0x95, 0x4a, 0xfb, 0xcc, 0x2d, 0x69, 0x03,
	0x4a, 0xae, 0x37, 0xf1, 0x03, 0xad, 0xc7, 0x6c, 0x8b, 0xd7, 0xdf, 0x95, 0xf2, 0x6c, 0xa4, 0xd4,
	0xda, 0x7d, 0xc9, 0xc5, 0x7e, 0xcd, 0x80, 0xb5, 0x79, 0x1d, 0xaa, 0xa7, 0xf4, 0xc3, 0xa7, 0x0a,
	0x79, 0xcf, 0x99, 0x42, 0xd2, 0xcd, 0x3f, 0x55, 0xc9, 0x07, 0xa1, 0xc0, 0xb5, 0x3e, 0x29, 0x65,
	0x63, 0xa9, 0x14, 0xa5, 0xd3, 0x5e, 0x0b, 0x5b, 0xda, 0x82, 0xb2, 0xce, 0x4c, 0x21, 0xba, 0x9a,
	0xda, 0xd9, 0x6a, 0x96, 0x18, 0x96, 0x9d, 0xec, 0xdb, 0x50, 0x4a, 0xd7, 0x4c, 0xdf, 0x07, 0x96,
	0x98, 0x45, 0x0c, 0x2b, 0xa9, 0x9c, 0x6d, 0x4d, 0x73, 0xe2, 0x1d, 0xcd, 0x22, 0x36, 0xdf, 0x63,
	0xb3, 0x88, 0x51, 0x0a, 0x56, 0x2f, 0xf4, 0x66, 0x6a, 0x83, 0x38, 0x28, 0xdb, 0x77, 0xa0, 0xbc,
	0x14, 0xfc, 0x49, 0xf1, 0xde, 0x83, 0xf5, 0xe6, 0xc8, 0x0d, 0x86, 0x4c, 0x8e, 0xdf, 0x62, 0x23,
	0x41, 0x1f, 0xc1, 0xa3, 0x45, 0x84, 0xea, 0x0e, 0x1e, 0x1d, 0xcd, 0x30, 0x18, 0x34, 0xe7, 0xba,
	0x64, 0x1e, 0x17, 0xd6, 0xef, 0x74, 0xba, 0xed, 0xe7, 0x80, 0xa6, 0x03, 0xeb, 0xaa, 0xae, 0x82,
	0x25, 0xa7, 0x50, 0xff, 0xf7, 0x52, 0x7a, 0x54, 0x13, 0x6f, 0xa9, 0xb7, 0x5f, 0x31, 0xa0, 0xd4,
	0x8d, 0xc6, 0x7e, 0xb2, 0xa7, 0xe9, 0x26, 0xe4, 0x63, 0xb9, 0x7e, 0x9e, 0xcd, 0xd0, 0xb9, 0xe4,
	0xcc, 0xd7, 0xd4, 0x86, 0x42, 0xc0, 0xee, 0x49, 0x8e, 0x76, 0x0b, 0xf3, 0x4a, 0x06, 0x6a, 0x01,
	0xd3, 0x2d, 0x80, 0x80, 0xdd, 0x93, 0xb9, 0xb4, 0x5b, 0x71, 0xcd, 0xdc, 0x36, 0xeb, 0x96, 0x93,
	0x42, 0xe4, 0x58, 0x72, 0x7f, 0x38, 0x12, 0x2d, 0xc6, 0xfd, 0xbb, 0x0c, 0x4f, 0x9b, 0xe4, 0x34,
	0x4a, 0x2b, 0x6c, 0x17, 0xca, 0x3a, 0xaf, 0x45, 0x45, 0x63, 0x36, 0x10, 0x6f, 0x55, 0x91, 0xd4,
	0xd3, 0x3a, 0x64, 0x91, 0xe7, 0x74, 0xe3, 0x52, 0x86, 0xca, 0xc0, 0xbe, 0x01, 0x97, 0x8e, 0xb8,
	0x1b, 0xc4, 0x03, 0xc6, 0x3b, 0xb8, 0xe5, 0x93, 0x1e, 0x24, 0xad, 0x37, 0xde, 0xa6, 0xf5, 0x35,
	0xb8, 0x7c, 0x9a, 0x40, 0x6f, 0x5e, 0x0f, 0x88, 0x9c, 0xaf, 0x4e, 0x38, 0xbc, 0xd9, 0x4c, 0x58,
	0xeb, 0x50, 0xea, 0x87, 0x93, 0xc8, 0xed, 0x8b, 0x76, 0xe0, 0xb1, 0x93, 0xa5, 0x23, 0x7d, 0x49,
	0x83, 0x47, 0x97, 0x5a, 0xe3, 0xd1, 0x95, 0x59, 0x3a, 0xba, 0x16, 0x0a, 0x7b, 0x43, 0xdd, 0x19,
	0x3a, 0x8a, 0x0e, 0xfd, 0x0c, 0xac, 0x7e, 0xf4, 0xce, 0xa1, 0xeb, 0x73, 0x5a, 0x85, 0xec, 0xc0,
	0x67, 0x63, 0x4f, 0xff, 0x47, 0xb5, 0x90, 0xe8, 0x5d, 0x77, 0x3c, 0x65, 0x7a, 0xf7, 0xaa, 0x85,
	0x7d, 0x03, 0x0a, 0xdd, 0x7e, 0xc8, 0x19, 0x3a, 0x6e, 0x42, 0x36, 0x96, 0x0b, 0x74, 0x34, 0x92,
	0xa6, 0x21, 0x44, 0x2f, 0xc3, 0xea, 0x84, 0x4d, 0x7a, 0x7a, 0x63, 0x96, 0x1c, 0xbd, 0xb2, 0xff,
	0x61, 0x40, 0x2e, 0xa9, 0x34, 0x39, 0x98, 0x8d, 0x73, 0x0f, 0xe6, 0xf7, 0xea, 0x81, 0xcb, 0xe0,
	0x38, 0xa4, 0x4f, 0xc7, 0xe6, 0xad, 0xd6, 0x99, 0x59, 0x23, 0x60, 0xf6, 0x27, 0x1e, 0x6e, 0xa4,
	0x92, 0x23, 0x45, 0x99, 0x1d, 0xc3, 0x6b, 0xc8, 0x4a, 0xf5, 0x45, 0x41, 0x74, 0x0b, 0x72, 0xb1,
	0x70, 0xb9, 0x68, 0x08, 0xbc, 0xa4, 0x4c, 0xad, 0x4d, 0x40, 0xd9, 0xd9, 0xb1, 0x1b, 0x8b, 0xae,
	0x70, 0x87, 0xac, 0x21, 0xf0, 0x5a, 0x4a, 0x6c, 0xd2, 0x0a, 0xb9, 0xd3, 0x63, 0x16, 0xc7, 0x7e,
	0x18, 0xb4, 0x5b, 0xb5, 0x5c, 0xca, 0x6a, 0x01, 0xdb, 0xaf, 0xe7, 0x20, 0x3f, 0xdf, 0x9d, 0x4f,
	0xb2, 0xe4, 0x6d, 0x28, 0xe2, 0x05, 0xe7, 0xb0, 0x78, 0x3a, 0x56, 0x77, 0x41, 0xc9, 0x49, 0x43,
	0xd4, 0x86, 0x52, 0x6a, 0x19, 0xd7, 0x2c, 0xec, 0xce, 0x12, 0x26, 0x6d, 0x62, 0xe1, 0x8a, 0x69,
	0xac, 0x69, 0xb2, 0x48, 0xb3, 0x84, 0xd1, 0xa7, 0xa1, 0xec, 0x07, 0x82, 0x0d, 0x59, 0x12, 0x0b,
	0x1b, 0xe2, 0x2c, 0x83, 0x72, 0xa4, 0x7b, 0xd3, 0xf1, 0x4b, 0xda, 0x24, 0x87, 0x3c, 0x29, 0x84,
	0xee, 0x00, 0x1d, 0xb9, 0xf1, 0xfe, 0x24, 0x12, 0xb3, 0xbd, 0x85, 0x5d, 0x5e, 0x4e, 0xb6, 0x73,
	0x8e, 0x86, 0x5e, 0x03, 0x12, 0x8f, 0xfd, 0x3e, 0x6b, 0x70, 0xee, 0xce, 0xb4, 0x75, 0x01, 0x2b,
	0x38, 0x83, 0xd3, 0x67, 0xa1, 0x96, 0x30, 0x74, 0x4f, 0xfb, 0x00, 0x46, 0xb8, 0x50, 0x4f, 0x6f,
	0xc0, 0xfa, 0xe0, 0xae, 0xdc, 0xd0, 0x69, 0xa7, 0x22, 0x5e, 0x64, 0xeb, 0xa9, 0x5f, 0xa0, 0xa6,
	0xc5, 0x39, 0x6b, 0x4b, 0x9f, 0x83, 0x77, 0x27, 0xe4, 0xca, 0x28, 0x4d, 0x54, 0xc2, 0xe8, 0x17,
	0x1b, 0xd0, 0x03, 0xa8, 0xc6, 0xc9, 0x48, 0xa5, 0x1d, 0xcb, 0x98, 0x41, 0x35, 0x95, 0xc1, 0x7c,
	0xf2, 0x9c, 0x73, 0x3d, 0xe8, 0x1e, 0x5c, 0x99, 0x17, 0x79, 0x1e, 0x63, 0x05, 0x53, 0x79, 0x4b,
	0x1b, 0xf9, 0x13, 0xef, 0xf9, 0x62, 0x84, 0xfc, 0x71, 0x6d, 0x0d, 0x3d, 0x52, 0x08, 0xfd, 0x08,
	0x94, 0x43, 0xee, 0x0f, 0x17, 0x4f, 0x10, 0x82, 0x87, 0xdf, 0xc5, 0x8f, 0x97, 0x65, 0xf3, 0xe5,
	0x89, 0x59, 0x3f, 0x77, 0x62, 0xe8, 0x87, 0xa0, 0xe2, 0x85, 0xfd, 0x74, 0xe6, 0x54, 0xff, 0x8d,
	0xe4, 0x31, 0xdc, 0x0a, 0xfb, 0xd3, 0x09, 0x0b, 0x84, 0x73, 0xca, 0x90, 0x7e, 0x00, 0x2e, 0x27,
	0xe5, 0xb5, 0x96, 0x29, 0x36, 0xb0, 0x94, 0x0b, 0xb4, 0x8b, 0xf7, 0x64, 0xf5, 0x6d, 0xdf, 0x93,
	0xd7, 0x1e, 0xad, 0x42, 0x4e, 0xcf, 0x23, 0x2d, 0x42, 0xae, 0x1d, 0xdc, 0x75, 0xc7, 0xbe, 0x47,
	0x56, 0x68, 0x19, 0x0a, 0xf2, 0x9c, 0x45, 0x17, 0x62, 0xd0, 0x3c, 0x58, 0xdd, 0xc0, 0x8d, 0x48,
	0x46, 0x4a, 0x87, 0x7e, 0x30, 0x24, 0x1e, 0xcd, 0x81, 0xd9, 0x62, 0x63, 0xc2, 0x68, 0x1e, 0xcc,
	0x2e, 0x13, 0xe4, 0xbe, 0x34, 0x33, 0x6f, 0x32, 0x41, 0x7e, 0x6c, 0xd0, 0x02, 0x58, 0xb7, 0x24,
	0xf8, 0x13, 0x25, 0x4a, 0xf4, 0xa7, 0x06, 0x2d, 0xc2, 0x6a, 0x3b, 0xe8, 0xf3, 0xde, 0x8c, 0xfc,
	0x0c, 0x17, 0x2d, 0x86, 0x8b, 0xd7, 0x70, 0x71, 0x93, 0x09, 0xe9, 0xf1, 0x3a, 0x2e, 0x1a, 0x51,
	0xc4, 0x02, 0x8f, 0xfc, 0xdc, 0xa0, 0x00, 0xd9, 0x2e, 0x13, 0xc1, 0x09, 0x79, 0x80, 0x8a, 0xae,
	0xe0, 0x1d, 0x16, 0x90, 0x5f, 0x20, 0xaf, 0x24, 0x23, 0xbf, 0x44, 0x51, 0x52, 0x91, 0x5f, 0x19,
	0xb4, 0x0c, 0xf9, 0x2e, 0x13, 0x8e, 0x7c, 0x1d, 0x90, 0x5f, 0xa3, 0x87, 0xcc, 0xe3, 0x85, 0x17,
	0xc9, 0x6f, 0xd0, 0xec, 0x40, 0x86, 0xf8, 0x6a, 0x06, 0x45, 0x99, 0xd4, 0xd7, 0x94, 0x28, 0x0b,
	0xf9, 0x7a, 0x86, 0x96, 0x20, 0x77, 0xb0, 0x7f, 0xe2, 0xc7, 0x22, 0x26, 0xdf, 0xc8, 0xc8, 0xc8,
	0x07, 0xcf, 0xb3, 0x59, 0x4c, 0xbe, 0xa9, 0xe4, 0x3b, 0xee, 0x38, 0x26, 0xdf, 0x52, 0x56, 0x37,
	0x99, 0x68, 0x8c, 0xc7, 0xe4, 0xdb, 0xca, 0x5d, 0x66, 0xf4, 0x1d, 0x65, 0x84, 0xa5, 0x7e, 0x57,
	0xcb, 0x32, 0xd8, 0xf7, 0x32, 0x32, 0x89, 0x03, 0x95, 0xc4, 0xf7, 0x95, 0xb7, 0x2e, 0xe2, 0x07,
	0x6a, 0x25, 0xab, 0xd8, 0x9b, 0x91, 0x1f, 0xa2, 0x61, 0x07, 0xef, 0x43, 0xf2, 0x49, 0x53, 0xaa,
	0x3a, 0xed, 0x20, 0x66, 0x5c, 0x90, 0x4f, 0x99, 0x32, 0x4c, 0xa7, 0xb3, 0xff, 0x02, 0xf9, 0xb4,
	0x12, 0x0f, 0xc3, 0x88, 0x7c, 0xc6, 0x94, 0x51, 0x3a, 0x87, 0xd3, 0x78, 0x44, 0x3e, 0x6b, 0xa2,
	0xb3, 0x94, 0x5f, 0x24, 0x9f, 0x53, 0x0b, 0xd5, 0x84, 0x57, 0x94, 0x83, 0xc3, 0x26, 0xe4, 0xf3,
	0x4a, 0x94, 0x59, 0xbd, 0xaa, 0x7c, 0x8f, 0xb8, 0x3f, 0x21, 0x5f, 0x40, 0xd8, 0x91, 0x94, 0x5f,
	0x34, 0x69, 0x05, 0x0a, 0x52, 0x54, 0xb4, 0x5f, 0x42, 0x33, 0x07, 0xe5, 0x2f, 0x23, 0xab, 0xa3,
	0x42, 0x7c, 0x05, 0x7d, 0xba, 0x0d, 0xcf, 0x23, 0xff, 0x44, 0x9b, 0x6e, 0xd3, 0xe5, 0x1e, 0xf9,
	0x97, 0x82, 0x65, 0xb0, 0x7f, 0x9b, 0xf8, 0x2f, 0x6e, 0xe1, 0x5d, 0x19, 0x93, 0xff, 0x20, 0x73,
	0xb7, 0x1d, 0x2b, 0x80, 0xfc, 0x57, 0x59, 0xca, 0xa0, 0xff, 0x43, 0xf1, 0x58, 0x72, 0xfd, 0xd6,
	0x92, 0x5c, 0xc7, 0xc8, 0xf5, 0x3b, 0x4b, 0xc6, 0x3b, 0x6e, 0x86, 0xd3, 0x40, 0x90, 0xdf, 0x5b,
	0xb2, 0x1f, 0xc7, 0xba, 0x55, 0x7f, 0xb0, 0x24, 0xd9, 0x71, 0x87, 0x9d, 0x28, 0xed, 0x1f, 0x95,
	0xa9, 0x2a, 0xf8, 0x4f, 0x16, 0x25, 0x50, 0x54, 0x8b, 0xbd, 0x59, 0x87, 0x9d, 0x90, 0x87, 0x16,
	0xa5, 0x50, 0x4e, 0x10, 0x3c, 0x2b, 0xc8, 0x9f, 0x55, 0x24, 0xc7, 0x0d, 0x5e, 0x22, 0x8f, 0x2c,
	0x4c, 0x40, 0x66, 0xfd, 0x86, 0x45, 0x37, 0xa0, 0x22, 0xc5, 0x94, 0xff, 0x9b, 0x16, 0xad, 0xc2,
	0x5a, 0x0a, 0x44, 0xaf, 0xbf, 0x58, 0xf4, 0x12, 0x90, 0x14, 0xaa, 0x88, 0xff, 0xaa, 0x72, 0x51,
	0x8b, 0xbf, 0x59, 0xd7, 0x3e, 0xae, 0x1f, 0xf5, 0xfa, 0x55, 0x4d, 0x09, 0x94, 0xf4, 0x98, 0x21,
	0x4c, 0x56, 0x68, 0x05, 0x60, 0xf1, 0x9c, 0x25, 0x72, 0x9b, 0x66, 0xf1, 0x1d, 0x48, 0x32, 0xc9,
	0x18, 0xe2, 0x73, 0x87, 0x98, 0x94, 0x42, 0x65, 0xf9, 0xf5, 0x45, 0x2c, 0xba, 0x06, 0xc5, 0x66,
	0x38, 0x89, 0xa6, 0x82, 0x1d, 0xb8, 0xf1, 0x88, 0x64, 0x25, 0xdd, 0x1d, 0xc6, 0xfd, 0xc1, 0x0c,
	0xd7, 0xab, 0x7b, 0xd5, 0x07, 0x6f, 0x6c, 0xad, 0xdc, 0x7f, 0xbc, 0x65, 0x3c, 0x78, 0xbc, 0x65,
	0x3c, 0x7a, 0xbc, 0x65, 0xbc, 0xfa, 0xe6, 0xd6, 0xca, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd9,
	0x69, 0x86, 0xff, 0x04, 0x10, 0x00, 0x00,
}
